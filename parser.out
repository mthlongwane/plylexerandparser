Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> NAME EQUALS expression
Rule 2     expression -> term
Rule 3     expression -> expression PLUS expression
Rule 4     expression -> LPAREN expression RPAREN
Rule 5     term -> NAME
Rule 6     term -> NUMBER

Terminals, with rules where they appear

EQUALS               : 1
LPAREN               : 4
NAME                 : 1 5
NUMBER               : 6
PLUS                 : 3
RPAREN               : 4
error                : 

Nonterminals, with rules where they appear

expression           : 1 3 3 4
statement            : 0
term                 : 2

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . NAME EQUALS expression

    NAME            shift and go to state 1

    statement                      shift and go to state 2

state 1

    (1) statement -> NAME . EQUALS expression

    EQUALS          shift and go to state 3


state 2

    (0) S' -> statement .



state 3

    (1) statement -> NAME EQUALS . expression
    (2) expression -> . term
    (3) expression -> . expression PLUS expression
    (4) expression -> . LPAREN expression RPAREN
    (5) term -> . NAME
    (6) term -> . NUMBER

    LPAREN          shift and go to state 7
    NAME            shift and go to state 5
    NUMBER          shift and go to state 6

    term                           shift and go to state 4
    expression                     shift and go to state 8

state 4

    (2) expression -> term .

    PLUS            reduce using rule 2 (expression -> term .)
    $end            reduce using rule 2 (expression -> term .)
    RPAREN          reduce using rule 2 (expression -> term .)


state 5

    (5) term -> NAME .

    PLUS            reduce using rule 5 (term -> NAME .)
    $end            reduce using rule 5 (term -> NAME .)
    RPAREN          reduce using rule 5 (term -> NAME .)


state 6

    (6) term -> NUMBER .

    PLUS            reduce using rule 6 (term -> NUMBER .)
    $end            reduce using rule 6 (term -> NUMBER .)
    RPAREN          reduce using rule 6 (term -> NUMBER .)


state 7

    (4) expression -> LPAREN . expression RPAREN
    (2) expression -> . term
    (3) expression -> . expression PLUS expression
    (4) expression -> . LPAREN expression RPAREN
    (5) term -> . NAME
    (6) term -> . NUMBER

    LPAREN          shift and go to state 7
    NAME            shift and go to state 5
    NUMBER          shift and go to state 6

    term                           shift and go to state 4
    expression                     shift and go to state 9

state 8

    (1) statement -> NAME EQUALS expression .
    (3) expression -> expression . PLUS expression

    $end            reduce using rule 1 (statement -> NAME EQUALS expression .)
    PLUS            shift and go to state 10


state 9

    (4) expression -> LPAREN expression . RPAREN
    (3) expression -> expression . PLUS expression

    RPAREN          shift and go to state 11
    PLUS            shift and go to state 10


state 10

    (3) expression -> expression PLUS . expression
    (2) expression -> . term
    (3) expression -> . expression PLUS expression
    (4) expression -> . LPAREN expression RPAREN
    (5) term -> . NAME
    (6) term -> . NUMBER

    LPAREN          shift and go to state 7
    NAME            shift and go to state 5
    NUMBER          shift and go to state 6

    term                           shift and go to state 4
    expression                     shift and go to state 12

state 11

    (4) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 4 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 4 (expression -> LPAREN expression RPAREN .)


state 12

    (3) expression -> expression PLUS expression .
    (3) expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    $end            reduce using rule 3 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 3 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 10

  ! PLUS            [ reduce using rule 3 (expression -> expression PLUS expression .) ]

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 12 resolved as shift
